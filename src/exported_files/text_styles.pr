<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Generated by Supernova - do not modify manually -->
{[ const typographyTokensTree = @ds.tokenGroupTreeByType("Typography") /]}
{[ traverse typographyTokensTree property subgroups into typographyTokenGroup ]}
  {[ let fullTokenGroupPath = @js.createFullTokenGroupPath(typographyTokenGroup) /]}
  {[ const typographyTokenInGroups = @ds.tokensByGroupId(typographyTokenGroup.id) /]}
  {[ for typographyToken in typographyTokenInGroups ]}
    {[ const fullTokenPath = @js.arrayConcat(fullTokenGroupPath, typographyToken.name) /]}
    {[ const fullTokenName = @js.arrayJoin(fullTokenPath, " ").camelcased(false) /]}

    <style name="{{ fullTokenName }}">    
        <item name="android:textSize">{{ typographyToken.value.fontSize.measure }}sp</item>
        {[ const letterSpacing = typographyToken.value.letterSpacing /]}
        {[ if @compare.nonnull(letterSpacing) ]}
        <item name="android:letterSpacing" tools:ignore="NewApi">{{ letterSpacing.measure }}sp</item>
        {[/]}
        {[ const lineHeight = typographyToken.value.lineHeight /]}
        {[ if @compare.nonnull(lineHeight) ]}
        <item name="lineHeight">{{ lineHeight.measure }}sp</item>
        {[/]}
        {[ const font = typographyToken.value.font /]}
        {[ if @boolean.and( @compare.nonnull(font), @compare.equals(font.family.lowercased(), "roboto") ) ]}
          {[ const isRegular = @boolean.or( @compare.null(font.subfamily), @compare.equals(font.subfamily.lowercased(), "regular") ) /]}
        <item name="android:fontFamily">sans-serif{[ if @boolean.not(isRegular) ]}-{{ font.subfamily.lowercased() }}{[/]}</item>
        {[/]}

    </style>
  {[/]}


{[/]}

</resources>