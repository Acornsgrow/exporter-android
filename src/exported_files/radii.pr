<?xml version="1.0" encoding="utf-8"?>
<resources>

{[ const radiusTokensTree = @ds.tokenGroupTreeByType("Radius") /]}
{[ traverse radiusTokensTree property subgroups into radiusTokenGroup ]}
  {[ let fullTokenGroupPath = @js.createFullTokenGroupPath(radiusTokenGroup) /]}
  {[ const radiusTokenInGroups = @ds.tokensByGroupId(radiusTokenGroup.id) /]}
  {[ for radiusToken in radiusTokenInGroups ]}
    {[ const fullTokenPath = @js.arrayConcat(fullTokenGroupPath, radiusToken.name) /]}
    {[ const fullTokenName = @js.arrayJoin(fullTokenPath, " ") /]}
    
    {[ if @boolean.and(@compare.nonnull(radiusToken.description), @boolean.not(@compare.equals(radiusToken.description, ""))) ]}
    <!-- 
        {{ @js.indentMultilineText(radiusToken.description, "        ") }} 
    -->
    {[/]}
    <dimen name="{[ inject "export_token_name" context fullTokenName /]}">{{ radiusToken.value.radius.measure }}dp</dimen>{[/]}


{[/]}

</resources>