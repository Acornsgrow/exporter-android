package {{ getPackageName(false) }}.tokens

import androidx.compose.runtime.Stable
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color

{[ inject "generated_code_warning" context this /]}
object GradientTokens {
    {[ let brand = ds.currentBrand() /]}
    {[ for group in ds.tokenGroupsOfType("Gradient", brand.id) ]}
    {[ const tokens = ds.tokensByGroupId(group.id) /]}
    {[ if !(tokens.count() === 0 && group.subgroups.count() === 0) ]}
    {[ if !group.isRoot ]}

    // {{ group.name }}
    {[/]}
    {[ for token in tokens ]}

    {[ if (token.description && token.description.count() > 0) ]}
    {{ token.description.asComment("        ") }}
    {[/]}
    @Stable
    val {{ getFullTokenName(token).camelcased(true) }} = {[ inject "TokenByType.kt" context token /]}

    {[/]}
    {[/]}
    {[/]}

    val all = mapOf(
    {[ let allTokens = ds.tokensByType("Gradient", brand.id).filterComponentTokens() /]}
    {[ for token in allTokens ]}
        "{{ getFullTokenName(token) }}" to {{ getFullTokenName(token).camelcased(true) }},
    {[/]}
    )

    val groups = mapOf(
    {[ for group in ds.tokenGroupsOfType("Gradient", brand.id) ]}
    {[ let groupTokens = ds.tokensByGroupId(group.id).filterComponentTokens() /]}
    {[ if (groupTokens.count() !== 0) ]}
        "{{ group.name }}" to mapOf(
            {[ for token in groupTokens ]}
            "{{ token.name }}" to {{ getFullTokenName(token).camelcased(true) }},
            {[/]}
        ),
    {[/]}
    {[/]}
    )
}